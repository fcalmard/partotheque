<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;
use oeuvresBundle\Repository\ProfilsRepository;
use oeuvresBundle\Repository\MenusRepository;

/**
 * UtilisateursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateursRepository extends EntityRepository
{
	
	public function ChargeListe()
	{
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT
				t.id,
				t.Login,
				t.passwd,
				concat(t.prenom,' ',t.nom) as utilisateur,
				t.email,
				t.actif,
				t.idPays,
				p.libelleProfil,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t
				LEFT JOIN oeuvresBundle:Profils p WHERE p.id=t.Profils_id"
		);
		//WHERE t.actif=1 and p.actif=1
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}		
		
	}

	
	public function ControleEmail($email)
	{
		$b=false;		
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT
				t.id,
				t.Login,
				t.passwd,
				t.nom,
				t.prenom,
				t.email,
				t.actif,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t
				WHERE t.actif=1 and t.email='".$email."'");
		
		try {
			$aResult=$query->getArrayResult();
			$b=(count($aResult)!=0) ? true : false;
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		return $b;
		
	}

	public function ControleLogin($Login)
	{
		$b=false;
		$iProfil=0;
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT
				t.id,
				t.Login,
				t.passwd,
				t.nom,
				t.prenom,
				t.Profils_id,
				t.email,
				t.actif,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t
				 LEFT JOIN oeuvresBundle:Profils p WHERE p.id=t.Profils_id
 				 WHERE t.actif=1 and p.actif=1 and t.Login='".$Login."'");
	
		try {
			$aResult=$query->getArrayResult();
			foreach ($aResult as $u)
			{
				$iProfil=$u['Profils_id'];
			}
			
			$b=($iProfil)!=0 ? true : false;
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		return $iProfil;
	
	}
	
	/**
	 * 
	 * @param string $email
	 */
	public function miseajourmdp($email,$mdp)
	{
	
		$mdp=md5($mdp);
			
		$b=false;
		$query = $this->getEntityManager()
		->createQuery(
				"UPDATE oeuvresBundle:Utilisateurs t
				SET t.passwd='".$mdp."'
				WHERE t.email='".$email."'");
		
		try {
			$b=$query->execute();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		
		return $b;
		
	}
}
