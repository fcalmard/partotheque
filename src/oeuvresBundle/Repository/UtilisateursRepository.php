<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * UtilisateursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateursRepository extends EntityRepository
{
	
	public function ChargeListe($aFiltres=null)
	{
		
		$btous=true;
		$suser='';
		if(isset($aFiltres) & is_array($aFiltres) & count($aFiltres)!=0)
		{
			$suser=(isset($aFiltres['utilisateur'])) ? $aFiltres['utilisateur'] : '';
			$btous=(isset($aFiltres['tous'])) ? $aFiltres['tous'] : 0 ;
		}		
		$sSql="SELECT
				t.id,
				t.Login,
				t.passwd,
				concat(t.prenom,' ',t.nom) as utilisateur,
				t.email,
				t.actif,
				t.idPays,
				t.Profils_id,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t";

		$sSql.=' where ';
		
		if($btous=='2')
		{
			$sSql.='t.actif=0';
		}
		else{
			$sSql.='t.actif=1';
			$btous=($btous=='1');
			
			if(!$btous && $suser!='')
			{
				$s=sprintf("%s",$suser);
				$sSql.=" and (t.nom like '%$s%'";
				$sSql.=" or t.nom = '$suser')";
			}
		}
		
		
		$em=$this->getEntityManager();
		
		$aListeUsers=array();
		
		try {
			$query= $this->getEntityManager()
			->createQuery($sSql);
			
			$aUsers=$query->getArrayResult();
			
			foreach ($aUsers as $kuser=>$aUser)
			{
				$idpro=$aUser['Profils_id'];
				$slibpro=$em->getRepository('oeuvresBundle:Profils')->rechercheProfil($idpro);
				
				$oUser=array("id"=>$aUser['id']
						,"Login"=>$aUser['Login']
						,"passwd"=>$aUser['passwd']
						,"utilisateur"=>$aUser['utilisateur']
						,"email"=>$aUser['email']
						,"actif"=>$aUser['actif']
						,"idPays"=>$aUser['idPays']
						,"libelleProfil"=>$slibpro
						,"datecreateAt"=>$aUser['datecreateAt']
						
				);
				$aListeUsers[]=$oUser;
			}
			
			return $aListeUsers;
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		
		$query = $this->getEntityManager()
		->createQuery($sSql);
		try {
			
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		
	}

	
	public function ControleEmail($email)
	{
		$b=false;		
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT
				t.id,
				t.Login,
				t.passwd,
				t.nom,
				t.prenom,
				t.email,
				t.actif,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t
				WHERE t.actif=1 and t.email='".$email."'");
		
		try {
			$aResult=$query->getArrayResult();
			$b=(count($aResult)!=0) ? true : false;
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		return $b;
		
	}

	public function ControleLogin($Login)
	{
		$b=false;
		$iProfil=0;
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT
				t.id,
				t.Login,
				t.passwd,
				t.nom,
				t.prenom,
				t.Profils_id,
				t.email,
				t.actif,
				t.datecreateAt
				FROM oeuvresBundle:Utilisateurs t
				 LEFT JOIN oeuvresBundle:Profils p WHERE p.id=t.Profils_id
 				 WHERE t.actif=1 and p.actif=1 and t.Login='".$Login."'");
	
		try {
			$aResult=$query->getArrayResult();
			foreach ($aResult as $u)
			{
				$iProfil=$u['Profils_id'];
			}
			
			$b=($iProfil)!=0 ? true : false;
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		return $iProfil;
	
	}
	
	/**
	 * 
	 * @param string $email
	 */
	public function miseajourmdp($email,$mdp)
	{
	
		$mdp=md5($mdp);
			
		$b=false;
		$query = $this->getEntityManager()
		->createQuery(
				"UPDATE oeuvresBundle:Utilisateurs t
				SET t.passwd='".$mdp."'
				WHERE t.email='".$email."'");
		
		try {
			$b=$query->execute();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$b=false;
		}
		
		return $b;
		
	}
	

	/**
	 * 
	 * @param string $slogin
	 * @return boolean
	 */
	public function initProfil(string $slogin)
	{
		$b=false;
		if($slogin!='')
		{
			
			$session = new Session();
			
			$tous=1;
			/*
			 * utilisateurs
			 */
			
			/*
			 * compositeur
			 */
			$aFiltresTest= $session->get($slogin.'_compositeurs_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('compositeur'=>'','tous'=>$tous);
				$session->set($slogin.'_compositeurs_filtres',$aFiltres);
			}
			/*
			 * tempsliturgique
			 */
			$aFiltresTest= $session->get($slogin.'_tempsliturgiques_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('tempsliturgique'=>'','tous'=>$tous);
				$session->set($slogin.'_tempsliturgiques_filtres',$aFiltres);
			}
			/*
			 * type de musique
			 */
			$aFiltresTest= $session->get($slogin.'_typesmusiques_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('typesmusique'=>'','tous'=>$tous);
				$session->set($slogin.'_typesmusiques_filtres',$aFiltres);
			}
			/*
			 * genres
			 */
			$aFiltresTest= $session->get($slogin.'_genres_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('genre'=>'','tous'=>$tous);
				$session->set($slogin.'_genres_filtres',$aFiltres);
			}
			/*
			 * voix
			 */		
			$aFiltresTest= $session->get($slogin.'_voix_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('voix'=>'','tous'=>$tous);
				$session->set($slogin.'_voix_filtres',$aFiltres);
			}
			/*
			 * fonctions
			 */
			$aFiltresTest= $session->get($slogin.'_fonctions_filtres');
			if(is_null($aFiltresTest))
			{
				$aFiltres=array('voix'=>'','tous'=>$tous);
				$session->set($slogin.'_fonctions_filtres',$aFiltres);
			}
			/*
			 * avancements CHANGE
			 */
			
			/*
			 * accompagnements
			 */
			
			 /*
			 * menus
			 */
			
			/*
			 * instruments
			 */
			
			/*
			 * profils
			 */
			
			$b=true;
			
		}
		return $b;
	
	}
}
