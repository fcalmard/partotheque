<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;
use oeuvresBundle\Entity\Compositeurs;

/**
 * CompositeursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompositeursRepository extends EntityRepository
{

	/**
	 * 
	 * @param string $aFiltres
	 * @return array|NULL
	 */
	public function ChargeListe($aFiltres=null)
	{
		$btous=true;
		$scompo='';
		if(isset($aFiltres) & is_array($aFiltres) & count($aFiltres)!=0)
		{
			$scompo=(isset($aFiltres['compositeur'])) ? $aFiltres['compositeur'] : '';
			$btous=(isset($aFiltres['tous'])) ? $aFiltres['tous'] : 0 ;
		}

		$sSql='SELECT
					t.id,
					t.active,
					t.prenom,
					t.nom,
					t.nomsec,
					t.nationalite,
					t.datenaiss,
					t.datedeces,
					t.datecreateAt
					FROM oeuvresBundle:Compositeurs t ';
		$sSql.=' where ';
		if($btous=='2')
		{
			$sSql.='t.active=0';
			
		}
		else{
			$sSql.='t.active=1';
			$btous=($btous=='1');
			if(!$btous && $scompo!='')
			{
				$s=sprintf("%s",$scompo);
				
				$sSql.=" and (t.nom like '%$s%'";
				$sSql.=" or t.nom = '$scompo')";
			}
		}
		
		
		$sSql.=' order by t.nom asc,t.nomsec asc,t.prenom asc';

		//echo "<br/>$sSql";
		
			$query = $this->getEntityManager()
				->createQuery($sSql);
			
			try {
				return $query->getResult();
			} catch (\Doctrine\ORM\NoResultException $e) {
				return null;
			}	
	}
	/**
	 * ChargeListeIds
	 * @param string $sNom
	 * @return string
	 */
	public function ChargeListeIds($sNom)
	{
		
		$sListeIds="";
		
		$s=sprintf("%s",$sNom);
		
		$sql="SELECT
				t.id from oeuvresBundle:Compositeurs t
				WHERE t.active=1 and t.nom like '%".$s."%'";
		
		$sql.=" or t.prenom like '%".$s."%'";
		//echo "<br/>ChargeListeIds >".$sql."<";
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
		);
			
		try {
			$aIds=$query->getResult();
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$sListeIds.=($sListeIds!="") ? "," : "";
										
					$sListeIds.=$id['id'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$sListeIds="";
		}
		return $sListeIds;
		
	}
	
	/**
	 * 
	 * rechercheCompositeur
	 * 
	 * @param string $sNom
	 * @param string $sPrenom
	 * @return number
	 */
	public function rechercheCompositeur($sNom,$sPrenom)
	{
		$idcompo=0;
		$sListeIds="";
		$s=sprintf("%s",$sNom);
		$sPrenom=sprintf("%s",$sPrenom);
		
		$sql="SELECT
				t.id from oeuvresBundle:Compositeurs t
				WHERE t.nom = '".$s."'";
		
		$sql="SELECT
				t.id from oeuvresBundle:Compositeurs t
				WHERE t.nom = '".$s."' and t.prenom= '".$sPrenom."'";
		
		//echo "<br/> RECHERCHE COMPOSITEUR >".$sql."<";
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
			
		try {
			$aIds=$query->getResult();
			
				//var_dump($aIds);
			
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$idcompo=$id['id'];
					$sListeIds.=$idcompo;
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$idcompo=0;
		}
		
		
		return $idcompo;
	}
	
	/**
	 * 
	 * @param integer $id
	 * @return string
	 */
	public function rechercheNomCompositeur($id)
	{
		$sNomCompositeur='';
		
		
		$conn=$this->getEntityManager()->getConnection();
		
		$sql="SELECT
				t.id,t.nom from oeuvresBundle:Compositeurs t
				WHERE t.id = ".$id;
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
		
		try {
			$aIds=$query->getResult();
						
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$ocompo)
				{
					$sNomCompositeur=$ocompo['nom'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$sNomCompositeur='';
		}
		
		return  $sNomCompositeur;
	}
	
	/**
	 * 
	 * @param string $sNom
	 * @param string $sPrenom
	 * @param string $sNomSec
	 * @return integer
	 */
	public function insertionCompositeur($sNom,$sPrenom,$sNomSec)
	{

		$idcree=0;
		
		$conn=$this->getEntityManager()->getConnection();
		
		
		$dataArray=array('nom'=>$sNom,'prenom'=>$sPrenom,'nomsec'=>$sNomSec,'active'=>1);
				
		try {
			$bOk=$conn->insert('Compositeurs', $dataArray);
				
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
				
		$idcree=$conn->lastInsertId();
				
		return $idcree;
		
	}
	
	/**
	 * ChargeListeSelectFiltre
	 * @return array|NULL
	 */
	public function ChargeListeSelectFiltre()
	{
		
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT
					t.id,
					t.nom,
					t.nomsec,
					t.prenom					
					FROM oeuvresBundle:Compositeurs t
					WHERE t.active=1 order by t.nom,t.prenom'
				);
		
		try {
			$aCompositeurs= $query->getArrayResult();
			
			//$aCompositeurs[]=array('id'=>0,'nom'=>'ANONYME','prenom'=>'');
			
			//$aCompositeurs=sort($aCompositeurs,SORT_ASC);
			
			
			
			return $aCompositeurs;
			
			//return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		
	}
	
}
