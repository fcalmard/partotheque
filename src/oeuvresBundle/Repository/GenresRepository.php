<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;

//use \Doctrine\DBAL\Driver\Mysqli\MysqliConnection;


/**
 * GenresRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GenresRepository extends EntityRepository
{

	
	public function ChargeListe($aFiltres=null)
	{
		$btous=true;
		$sgenre='';
		if(isset($aFiltres) & is_array($aFiltres) & count($aFiltres)!=0)
		{
			$sgenre=(isset($aFiltres['genre'])) ? $aFiltres['genre'] : '';
			$btous=(isset($aFiltres['tous'])) ? $aFiltres['tous'] : 0 ;
		}
	
		$sSql='SELECT
				t.id,
				t.active,t.code,				
				t.libelle,
				t.datecreateAt
				FROM oeuvresBundle:Genres t
				WHERE ';

		if($btous=='2')
		{
			$sSql.='t.active=0';
			
		}
		else{
			$sSql.='t.active=1';
			$btous=($btous=='1');
			if(!$btous && $sgenre!='')
			{
				$s=sprintf("%s",$sgenre);
				$sSql.=" and (t.libelle like '%$s%'";
				$sSql.=" or t.libelle = '$sgenre')";
			}
		}

		$sSql.='order by t.libelle';
		
		$query = $this->getEntityManager()
		->createQuery($sSql);
		
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	
	
	}
	
	/**
	 *
	 * @param string $sCode
	 * @return number
	 */
	public function rechercheGenre($sCode)
	{
		$id=0;
			
		$sCode=$this->epure($sCode);
	
		$sCode=strtoupper($sCode);
	
		$sCode=substr($sCode, 0,10);
	
		$sCode=sprintf("%s",$sCode);
	
		$sql="SELECT
				t.id from oeuvresBundle:Genres t
				WHERE t.code = '".$sCode."'";
	
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
			
		try {
			$aIds=$query->getResult();
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$id=$id['id'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$id=0;
		}
	
	
		return $id;
	}
	
	/**
	 *
	 */
	public function insertionGenre($sLib,$itypemusique)
	{
	
		$idcree=0;
	
		$sLib=$this->epure($sLib);
		
		$sCode=$sLib;
	
		$sCode=$this->epure($sCode);
	
		$sCode=strtoupper($sCode);
	
		$sCode=substr($sCode, 0,10);
	
		$nowUtc = new \DateTime( 'now',  new \DateTimeZone( 'UTC' ) );
	
		$sdate= $nowUtc->format('Y-m-d h:i:s');
	
		$conn=$this->getEntityManager()->getConnection();
	
		$dataArray=array('code'=>$sCode,'libelle'=>$sLib,'active'=>1
				,'datecreateAt'=>$sdate
				,'typesmus_id'=>$itypemusique	
		);
	
		try {
			$bOk=$conn->insert('Genres', $dataArray);
	
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
	
		$idcree=$conn->lastInsertId();
	
		return $idcree;
	
	}
	
	private function epure($texte)
	{
		
;
		$texte = trim(strtolower($texte));
		$texte = htmlentities($texte, ENT_NOQUOTES, 'utf-8');
		$texte = preg_replace('#&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $texte);
		$texte = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $texte); // pour les ligatures
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
	
		$texte = strtr(
				$texte,
				'@ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ'.CHR(34),
				'aAAAAAACEEEEIIIIOOOOOUUUUYaaaaaaceeeeiiiioooooouuuuyy'.chr(32)
				);
	
		$texte=str_ireplace(chr(34), "", $texte);
		$texte=str_ireplace(chr(39), "", $texte);
		
		return $texte;
	}	
	
}
