<?php

namespace oeuvresBundle\Repository;

use Doctrine\DBAL\Driver\PDOConnection;

use Doctrine\DBAL\Driver\PDOSqlite\Driver;

use Doctrine\ORM\EntityRepository;

use oeuvresBundle\Entity\langues_oeuvres;

//use \Doctrine\DBAL\Driver\Mysqli\MysqliConnection;

use Doctrine\ORM\Persisters\BasicEntityPersister;

/**
 * languesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LanguesRepository extends EntityRepository
{

	
	public function ChargeListe()
	{
	
	
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT
				t.id,
				t.active,t.code,t.libelle,
				t.datecreateAt
				FROM oeuvresBundle:langues t'
		);
	
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	
	
	}
	
	public function ChargeListeIds()
	{
	
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT	t.id FROM oeuvresBundle:langues t'
		);
	
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		
	}	
	/*
	 * resultat liste des id des oeuvres de la langue
	 */
	public function ChargeListeIdOeuvres($id)
	{
		$sListeIds="";
		$criteria=array('id'=>$id);
		$aLangues=$this->findBy($criteria);
		foreach ($aLangues as $kl=>$olangue)
		{
			$aol=$olangue->getOeuvres();
	
			foreach ($aol as $kol=>$ool)
			{
				$sid=$ool->getId();
				$sListeIds.=($sListeIds!="") ? "," : "";
				$sListeIds.=$sid;
			}	
		}
		return $sListeIds;
	}
	
	
}
