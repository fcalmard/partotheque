<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \Doctrine\ORM\NoResultException;
use Symfony\Component\HttpFoundation\Session\Session;
use oeuvresBundle\Repository\CompositeursRepository;
use oeuvresBundle\Repository\TempsLiturgiquesRepository;
use oeuvresBundle\Repository\VoixRepository;
use oeuvresBundle\Repository\LanguesRepository;
use Doctrine\ORM\Repository\RepositoryFactory;
use oeuvresBundle\Entity\Compositeurs;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\NativeQuery;
use Symfony\Component\Serializer\Exception\Exception;
use Doctrine\Instantiator\Exception\ExceptionInterface;
use oeuvresBundle\Entity\Oeuvres;
use oeuvresBundle\Entity\Langues;
use oeuvresBundle\Entity\langues_oeuvres;

/*
 (1, 1, 'Musique sacrée', '2016-04-27 00:00:00'),
 (2, 1, 'Musique liturgique', '2016-04-27 00:00:00'),
 (3, 1, 'Musique profane', '2016-04-27 00:00:00');
 *
 */
CONST MUSIQUE_SACREE=1;
CONST MUSIQUE_LITURGIQUE=2;
CONST MUSIQUE_PROFANE=3;

/*
 1 	1 	En cours 	NULL
 2 	1 	Supprimée 	NULL
 3 	1 	Validé 	NULL
 4 	1 	Clôturé 	NULL	 *
 */
CONST STATUT_EN_COURS	=1;
CONST STATUT_SUPPRIMEE	=2;
CONST STATUT_VALIDEE	=3;
CONST STATUT_CLOTUREE	=4;



//use Doctrine\ORM\Persisters\BasicEntityPersister;

/**
 * OeuvresRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OeuvresRepository extends EntityRepository
{
	/**
	 * ChargeListe
	 * @param array $aFiltre
	 */
	public function ChargeListe(array $aFiltre = null,$aTriOeuvresSession=null,$bAffAppPdf=false)
	{
		/*
		 * 
		 */
				
		$eml=$this->getEntityManager();
		
		$gUserLoginLogged="";
		
		/*
		$aTriOeuvresSession=array();
		
		$session = $this->getRequest()->getSession();
		if($session)
		{
			$gUserLoginLogged=$session->get('gUserLoginLogged');
			 
		}
		if($gUserLoginLogged!="")
		{
			$aTriOeuvresSession=$session->get($gUserLoginLogged.'_oeuvres_tri');
				
		}*/
		
		$sWhere="";
		if(is_array($aFiltre) && count($aFiltre)!=0)
		{
			
			foreach ($aFiltre as $vf)
			{
				//echo "<br/> VF <br/> >";
				//var_dump($vf);
				

				
				//compositeurId
				
				foreach ($vf as $kvalf=>$valf)
				{
					//echo "<br/>******  kvalf >";
					//echo $kvalf;
					
					switch ($kvalf)
					{
						case 'titreOeuvre':
							if(trim($valf)!="")
							{
								//$sWhere=($sWhere!="") ? " and ".$sWhere : $sWhere;
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								
								$sWhere.="o.".$kvalf;
								$sWhere.=" like '%".$valf."%'";
							}
							//echo "libelle* >  valf >";
							//echo $valf;
							//echo "<br/>1 $kvalf <br/>".$sWhere."<br/>";
											
							break;
						case 'compositeur_id':
							if(trim($valf)!="")
							{
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								$sWhere.="c.id";
								$sWhere.="=".$valf;
								//echo "<br/> $kvalf <br/>".$sWhere."<br/>";								
							}
							break;
							
						case 'nomcompositeur':
							if(trim($valf)!="")
							{
								if(!is_null($eml))
								{
									//echo "<br/>nomcompositeur >$valf<";
														
									//die("101");
									/*
									 * recherche des id des compositeur ayant le nom recherché
									 */
									$sListeIds= $eml->getRepository('oeuvresBundle:Compositeurs')->ChargeListeIds($valf);
									//echo "<br/>nomcompositeur sListeIds >$sListeIds<";
										
									if($sListeIds!="")
									{
										$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
										$sWhere.=" idcompositeur in (".$sListeIds.")";
									}
								}else
								{
									die("115 EM NULL");
								}

							}
							break;
						case 'siecle':
							if(trim($valf)!="")
							{
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								$sWhere.=" o.siecle like '%".$valf."%'";
								//die($sWhere);
							}
							break;
						case 'langue':
							/*
							 * langues_oeuvres
							 * 
							SELECT `langues_id,`oeuvres_id`` FROM `langues_oeuvres` WHERE 1
							 */
							if(trim($valf)!="")
							{
								if(!is_null($eml))
								{
									$sListeIds= $eml->getRepository('oeuvresBundle:Langues')->ChargeListeIdOeuvres($valf);
									/*
									 * liste des id des oeuvres chanté en
									 */
									if($sListeIds!='')
									{
										$sListeIds="(".$sListeIds.")";
										
										$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
										
										$sWhere.=" o.id in ".$sListeIds;
										//echo "<br/>".$sWhere;
																				
									}
									
								}

								
							}
							break;
						
						case 'genre_id':
							if(trim($valf)!="")
							{
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								$sWhere.="g.id";
								$sWhere.="=".$valf;
								//echo "<br/> $kvalf <br/>".$sWhere."<br/>";								
							}
							break;						
						case 'tps_litur_id':
							
							/*
							 * tester si tableau
							 */
							
							if(!is_null($valf) && is_array($valf))
							{
								//echo "<br/>PLUSIEURS VALEURS<br/>";								
								//var_dump($valf);
								
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								
								$sWhere.="t.id in ";
								$slstval="";
								
								foreach ($valf as $zvalf)
								{
									if(trim($zvalf)!="")
									{
										$slstval.=($slstval=="") ? "(".$zvalf : ",".$zvalf;
										//$sWhere=($sWhere!="") ? $sWhere." or " : $sWhere;
										//$sWhere.="t.id";
										//$sWhere.=" in (".$slstval.")";
										//$sWhere.=" in (".$slstval.")";
									}
									//echo "<br/>232 > \$zvalf>". $zvalf."<";
								}
								
								$slstval.=($slstval!="") ? ")" : "";
								
								$sWhere.=($slstval!='') ? $slstval : "";
								
								//echo "<br/> slstval >".$slstval."<br/>";
								//echo "<br/> sWhere >".$sWhere."<br/>";								
								//die("234");
								
							}

							//die("FILTRE SUR tps_litur_id");
								
							break;
						case 'fonction_id':
							if(trim($valf)!="")
							{
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								$sWhere.="f.id";
								$sWhere.="=".$valf;
								//echo "<br/> $kvalf <br/>".$sWhere."<br/>";
							}
							break;
						case 'voix_id':
							if(trim($valf)!="")
							{
								$sWhere=($sWhere!="") ? $sWhere." and " : $sWhere;
								$sWhere.="v.id";
								$sWhere.="=".$valf;
								//echo "<br/> $kvalf <br/>".$sWhere."<br/>";
							}
							break;
						default:
							break;
					}
						
				}
				/*
				if($kf!="")
				{
						
					$sWhere.=$kf;
					
					$sWhere.="'".$vf."'";
					
						
				}
				*/
			}
			
				
			$sWhere=($sWhere!="") ? " and ".$sWhere ."" : $sWhere;
					
			//echo "<br/>283 fin <br/>".$sWhere."<br/>"; 
				
			//die("285");
		
		}
		
		$sTri='c.nom,o.titreOeuvre,o.reference';
		
		if(  !is_null($aTriOeuvresSession) && is_array($aTriOeuvresSession) && count($aTriOeuvresSession)!=0)
		{
			foreach ($aTriOeuvresSession as $k=>$aTri)
			{
				//echo "<br/> TRI $k<br/>";
				
				foreach ($aTri as $koTri=>$oTri)
				{
					if($oTri!="")
					{
												
						
						$sTri=$koTri.' '.$oTri;
						
						//echo "<br/> OTRI $koTri >";
						//ECHO $sTri;
						
					}						
						
				}
				
			}
			
			//die("<br/>DANS REPOSITORY TRI");
		}
		
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT 
					o.id,
					o.actif,
					o.reference,
					o.titreOeuvre,
					o.traductiontitreOeuvre,
					o.cote,
					o.siecle,
					t.id as idtpslliturgique,
					t.libelle AS tpslliturgique,
					t.couleur AS coultps,
					t.couleurdef AS couldeftps,
					t.couleurfg AS coulfgtps,				
					g.id as idgenre,
				    g.libelle AS genre,
					v.id as idvoix,
					v.libelle AS voix,
				    c.id as idcompositeur,
					concat(c.prenom,\' \',c.nom) as compositeur,
					o.genre_id,
					f.id as idfonction,
					f.libelle AS fonction
					FROM oeuvresBundle:Oeuvres o 
				 LEFT JOIN oeuvresBundle:TempsLiturgiques t WHERE t.id=o.tps_litur_id 
				 LEFT JOIN oeuvresBundle:Compositeurs c WHERE c.id=o.compositeur_id 
				 LEFT JOIN oeuvresBundle:Genres g WHERE g.id=o.genre_id
				 LEFT JOIN oeuvresBundle:Voix v WHERE v.id=o.voix_id
				 LEFT JOIN oeuvresBundle:Accompagnements a WHERE a.id=o.accompagnement_id
				 LEFT JOIN oeuvresBundle:Fonctions f WHERE f.id=o.fonction_id having o.actif=1 '
				.$sWhere
				.' order by '.$sTri
		);
		
		// $query->andWhere('o.actif = ?', array(1));
		//die('filtre');
		try {
			
			$a=$query->getArrayResult();
			
			$alcoul=array();
			
			foreach ($a as $oeuvre)
			{
				$coultps=$oeuvre['coultps'];
				
				if(count($alcoul)==0)
				{
					$alcoul[]=$coultps;
						
				}

				$b=array_search($coultps,$alcoul);
				//echo "<br/> trouvé coultps >".."<";
				
				//echo "<br/> trouvé >".$b."< ".$coultps;
				if ($b) 
				{
					$alcoul[]=$coultps;
				}
			}
			
			
			//echo "<br/>liste des couleurs<br/>".count($alcoul);
				
			if(count($alcoul)<2)
			{
				//var_dump($alcoul);
				
			}
			//die("388");
			if($bAffAppPdf)
			{
				$aArbre=array();
				
				$a=$query->getArrayResult();
				

				foreach ($a as $oeuvre)
				{
					$aoeuvre=array("id"=>$oeuvre['id']
							,"compositeur"=>$oeuvre['compositeur']
							,"titreOeuvre"=>$oeuvre['titreOeuvre']
							,"traductiontitreOeuvre"=>$oeuvre['traductiontitreOeuvre']
								
							
							,"genre"=>$oeuvre['genre']
							,"coultps"=>$oeuvre['coultps']
							,"couldeftps"=>$oeuvre['couldeftps']

							,"tpslliturgique"=>$oeuvre['tpslliturgique']
							,"coultps"=>$oeuvre['coultps']
							,"couldeftps"=>$oeuvre['couldeftps']
							,"coulfgtps"=>$oeuvre['coulfgtps']
								
							,"fonction"=>$oeuvre['fonction']
							,"voix"=>$oeuvre['voix']
							,"reference"=>$oeuvre['reference']
							,"cote"=>$oeuvre['cote']
								
							,"cote"=>$oeuvre['cote']
								
							
							);
					
					
					$aArbre[]=$aoeuvre;
					
					if($bAffAppPdf)
					{
						
						/*
						 * charger les partitions des oeuvres
						 */
						
						foreach ($aoeuvre as $ko=>$aoeuvre2)
						{
						
							$aListeSousMenus=array();
						
							switch ($ko)
							{
								case 'id':
									
									/*
									 * charger les partitions de l'oeuvre
									 */
									$querypart = $this->getEntityManager()
									->createQuery(
											'SELECT DISTINCT
											sm.id,
											sm.libelle,
											sm.active,
											sm.duree,
											sm.pathfichier,
											sm.oeuvre_id
												
											FROM oeuvresBundle:Partitions sm
											WHERE sm.oeuvre_id='.$aoeuvre2
											.' order by sm.libelle'
									);
																		
									try {
										$aListePartitions=$querypart->getArrayResult();
										
										foreach ($aListePartitions as $kp=>$oPartition)
										{

											$aoP=array("id"=>0
													,"oeuvre_id"=>$oPartition['oeuvre_id']
													,"compositeur"=>''
													,"titreOeuvre"=>$oPartition['libelle']
													,"pathfichier"=>$oPartition['pathfichier']
													,"traductiontitreOeuvre"=>''
													,"genre"=>''
													,"tpslliturgique"=>''
													,"fonction"=>''
													,"voix"=>''
													,"reference"=>''
													,"cote"=>''
													,"partitionid"=>$oPartition['id']
											
											);
											
											$aArbre[]=$aoP;
												
										}

										
									} catch (\Doctrine\ORM\NoResultException $e) {
										exit("ERREUR LISTE PARITIONS");
									}
									
									break;
								default:
									break;
							}
						}					
						
					}
				}
				return $aArbre;				
			}
			else{
				return $query->getResult();
				
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}		
		
	}
	/*
	 		->createQuery('SELECT.id,Oeuvres_id	FROM oeuvresBundle:Partitions WHERE Oeuvres_id = $id'
* 
	 */
	public function findPartitions($id)
	{
		
		/*$query = $this->getEntityManager()
		->createQuery('SELECT id,Oeuvres_id	FROM oeuvresBundle:Partitions'
		);
		
		SELECT `Oeuvres_id`
FROM `Partitions`
WHERE 1
LIMIT 0 , 30


		*/
		
		$query = $this->getEntityManager()
		->createQuery(
				"SELECT t.id,t.active,t.oeuvre_id,t.libelle,t.duree,t.datecreateAt,
				t.oeuvre_id,		
				t.pathfichier FROM oeuvresBundle:Partitions t
				WHERE t.active=1 and t.oeuvre_id=".$id
		);		
		/*
		 * SELECT `Oeuvres_id` FROM `Partitions` WHERE 1
		 */
		
		
		//$query->andWhere('o.Oeuvres_id = ?', $id);
		
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	}
	
	public function getDossierTraductions()
	{
		/**
		 * aller chercher dans config
		 * @var string
		 */
		
		
		//incorret $sPathCible="/var/www/sites/mychorale/web/uploads/traductions";

		$sPathCible="../web/uploads/traductions";
		
		$mode=0755;
		
		try {
			if(!file_exists($sPathCible))
			{
				mkdir($sPathCible,$mode, true);
				
			}else 
			{
				//chmod($sPathCible, $mode);
				
			}
		}catch(ErrorException $e){
		
			var_dump($e->getMessage());
			echo "<br/><h1>dossier existant</h1>";
			
			die("pb fichier");
		}
		
		//die($sPathCible);
		
		return $sPathCible;
	}

	public function getDossierPartitions()
	{
		/**
		 * aller chercher dans config
		 * @var string
		 */
	
	
		$sPathCible="/var/www/sites/mychorale/web/uploads/partitions";
	
		$sPathCible="../web/uploads/partitions"; //ErrorException
		
		$mode=0755;
	
		try {
			if(!file_exists($sPathCible))
			{
				mkdir($sPathCible,$mode, true);
	
			}else
			{
				//chmod($sPathCible, $mode);
	
			}
		}catch(ErrorException $e){
	
			var_dump($e->getMessage());
			echo "<br/><h1>dossier inexistant</h1>";
	
			die("pb fichier");
		}
	
		//die($sPathCible);
	
		return $sPathCible;
	}

	public function getDossierImports()
	{
		/**
		 * aller chercher dans config
		 * @var string
		 */
	
	
		$sPathCible="/var/www/sites/mychorale/web/uploads/imports";
	
		$sPathCible="../web/uploads/imports"; //ErrorException
	
		$mode=0755;
	
		try {
			if(!file_exists($sPathCible))
			{
				mkdir($sPathCible,$mode, true);
	
			}else
			{
				//chmod($sPathCible, $mode);
	
			}
		}catch(ErrorException $e){
	
			var_dump($e->getMessage());
			echo "<br/><h1>dossier inexistant</h1>";
	
			die("pb fichier");
		}
	
		//die($sPathCible);
	
		return $sPathCible;
	}
	
	/**
	 * 
	 * @param boolean $bReInitBase
	 */
	public function Import($sFichier,$bReInitBase,$bSimulation,$sDossierDebut,$sDossierFin)
	{

		//echo ("IMPORT EN COURS...... >".$sFichier);
		
		$eml=$this->getEntityManager();
		
		$cpt=0;
		
		$aLignesImport=array();
		
		if(file_exists($sFichier))
		{
	
			echo "<div id='iddivimport' >";
			/*
				
			echo "<div id='idimageimport'>";
				
			echo "<img alt='Import ' src='/web/images/loading.gif' />";
			echo "</div>";
		*/	
			//echo ("<br/>Lecture en cours ...... ".$sFichier." <br/>");

			//$sContenu=file_get_contents($sFichier);
			
			/*Ouverture du fichier en lecture seule*/
			$handle = fopen($sFichier, 'r');
			/*Si on a réussi à ouvrir le fichier*/
			if ($handle)
			{
				/*Tant que l'on est pas à la fin du fichier*/
				while (!feof($handle))
				{
					/*On lit la ligne courante*/
					$buffer = fgets($handle);
					$cpt++;
					
					//echo "<br/>".$cpt;//." >".$buffer;
					
					$aLigne=explode(chr(9), $buffer);
					
					
					//var_dump($sDossierFin);

						$imp = new import();
						
						foreach ($aLigne as $cptcol=>$vcol)
						{
							$cptcol++;
													
							$vcol=trim($vcol);
							$vcol=$this->epure($vcol);
								
							//$vcol=htmlentities($vcol,ENT_NOQUOTES);
							//$vcol=htmlentities($vcol,ENT_COMPAT);
							
							//CARROLL
							
							//$vcol=str_replace($vcol,"'"," ");
							
							//echo "<br/>659 vcol >".$cptcol." ".$vcol." <br/>";
								
							
							switch ($cptcol)
							{
								case 1:
									$imp->setColA($vcol);//titre
									break;
								case 2:
									/*
											compositeur/Parmonisé par									 * 
									 */
									
									$scompositeur=$vcol;
															
									$vcol=$this->epure($vcol);
									$vcol=strtoupper($vcol);
								
									//$vcol=($vcol=="ANONYME") ? "" : $vcol;
										
									$aColComHarmon=array();
									$harmonisateur="";
										
									$snomh="";
									$spreh="";
									
									if($vcol!="")
									{
										//echo "<br/><br/> vcol >".$cptcol." >".$vcol." <br/>";
																					
										IF(stripos($vcol, "CARROL")>0)
										{
										
											//die($vcol);
										}
										
										$vcol=ucfirst($vcol);
										
										$imp->setColB($vcol);//compositeur
										$imp->setColBP("");//compositeur prenom
										
										//echo "<br/>700 vcol >".$cptcol." ".$vcol." <br/>";
										
										$imp->setColHar("");
										$imp->setColHarp("");
										
										/**/
																				
										$aColComHarmon=explode("/", $vcol);
										
										//echo "<br/> 789 TAILLE =".count($aColComHarmon);
										

										$baa=false;
										if(is_array($aColComHarmon))
										{
											$vcol=$aColComHarmon[0];
											$nomcompo=$this->epure($vcol);
											$nomhar=$vcol;
											$snomh=$vcol;
											
											if(trim(strtoupper($nomcompo))=="ANONYME")
											{
											
												//echo "<br/>756 vcol >".$vcol." <br/>";
											
												//var_dump($aColComHarmon);
											
												//echo "<br/>720 vcol >".$snomh." <br/>";
											}
												
												
												
											if(count($aColComHarmon)>1)
											{
												$harmonisateur=$aColComHarmon[1];
												
												if(trim(strtoupper($nomcompo))=="ANONYME")
												{
												
													//echo "<br/><br/>772 TITRE >".$imp->getColA()." <br/>";
													//echo "<br/><br/>773 \$nomcompo >".$nomcompo." <br/>";
													//echo "<br/>774 \$harmonisateur >".$harmonisateur." <br/>";
														
													//var_dump($aColComHarmon);
												
													//echo "<br/>720 vcol >".$snomh." <br/>";
												}
												
												
												//if(trim(strtoupper($aColComHarmon[0]))==trim(strtoupper("Anonyme")))
												//{
													//$vcol=$aColComHarmon[0];
													
													//echo "<br/>  vcol >".$vcol."<";
													//echo "<br/> 750 ANONYME TROUVE";
													
													
													$aNomPrenom=explode(" ", $harmonisateur);
													
													$snomh=$harmonisateur;
													$spreh="";
													
													if(is_array($aNomPrenom)){
														$snomh=$aNomPrenom[0];
														if(count($aNomPrenom)>1){
															$spreh=$aNomPrenom[1];	
															if(count($aNomPrenom)>2){
																$spreh.=" ".$aNomPrenom[2];
																if(count($aNomPrenom)>3){
																	$spreh.=" ".$aNomPrenom[3];																		
																}
															}
														}
													}
													/*
													if($snomh=="BOLLER")
													{
											
													}*/
													//

													
													$baa=true;
												//}
												
												if(trim(strtoupper($nomcompo))=="ANONYME")
												{
													//echo "<br/>820 harmonisateur >".$harmonisateur."<";													
													//echo "<br/>821 nom >".$snomh;
													//echo "<br/>822 prenom >".$spreh;
												}
												
											}
										}
										
										/**/
										
										$aColCom=explode(" ", $vcol);
										if(is_array($aColCom))
										{
											/*if($baa)
											{
												echo "<br/>  778, auteur >".$vcol."< <br/>";
												
												var_dump($aColCom);
												
											}*/
												
											//echo "<br/> nb=".count($aColCom)."<br/>";
												
												
											if(count($aColCom)>1)
											{
												$imp->setColB($aColCom[0]);	
												
												$sprenom=$aColCom[1];
												
												if(count($aColCom)>2){
													$sprenom.=" ".$aColCom[2];
													if(count($aColCom)>3){
														$sprenom.=" ".$aColCom[3];
													}
												}
												
												$imp->setColBP($sprenom);
											}
												
										
											//var_dump($imp);
												
											//die("618");
										
										}

										//echo "<br/><br/>805 nom >".$snomh;
										//echo "<br/>806 prenom >".$spreh;
										
										$imp->setColHar($snomh);//harmonisateur
										
										$imp->setColHarp($spreh);
										
										if(trim(strtoupper($nomcompo))=="ANONYME" && $snomh=="PETERS")
										{
											echo "<br/>  876, harmonisateur >".$harmonisateur."<";
												
											echo "<br/>878 nom >".$snomh;
											echo "<br/>879 prenom >".$spreh;
										}
										
									}
	
									break;								
								case 3://$sDossierFin
									
									//echo "<br/> vcol >".$cptcol." >".$vcol."< <br/>";
														
									/*if(trim($vcol)=="ec")
									{
										
										echo "<br/> 786 scompositeur >".$scompositeur."<";
														
									}*/
									
									$imp->setColC($vcol);//ref numéro de dossier
									
									break;								
								case 4:
									$imp->setColD($vcol);//LANGUE GREGORIEN latin		Langues
									break;
								case 5:
									$imp->setColE($vcol);//LANGUE latin
									break;
								case 6:
									$imp->setColF($vcol);//TempsLiturgiques
									break;								
								case 7:
									$imp->setColG($vcol);//FONCTIONS
									break;
								case 8:
									$imp->setColH($vcol);//COTE
									break;
								case 9:
									$imp->setColI($vcol);//VOIX
									break;								
								case 10:
									$imp->setColJ($vcol);
									break;
								case 11:
									$imp->setColK($vcol);//GENRE si valeur dans cette colonne type musique = SACREE
									break;
								case 12:
									$imp->setColL($vcol);//GENRE si valeur dans cette colonne type musique = PROFANE
									break;								
								case 13:
									$imp->setColM($vcol);//SIECLE
									break;
								case 14://DOSSIER BIS
									break;
								case 15:
									$imp->setColO($vcol);//ACCOMPAGNEMENT
									break;
								case 16:
									$imp->setColP($vcol);//COMMENTAIRES
									break;
								case 17:
									$imp->setColQ($vcol);//COMMENTAIRES
									break;
								default:
									break;
									
							}
													
						}
					
						//var_dump($imp);
						//die("671");

						$aLignesImport[]=$imp;
					
										
				}
				
				/*On ferme le fichier*/
				fclose($handle);
			
			}
			
			//echo "simulation ".var_dump($bSimulation);
			//echo "reinit base ".var_dump($bReInitBase);
			
			//echo "aLignesImport ".var_dump($aLignesImport);
				
			
//die('672');
			
			/**
			 * import dans la BD
			 */			
			if($bSimulation==false)
			{
							
				if($bReInitBase)
				{
				
					//echo ("	REINITIALISATION DONNEES EN COURS...... ");

					$sSql="delete from oeuvresBundle:Compositeurs";
					$query=$this->getEntityManager()->createQuery($sSql);
					$bQok=$query->execute();
					
					
					/*
					 * ALTER TABLE tablename AUTO_INCREMENT = 1
					 
					try {
						$sSql="ALTER TABLE Compositeurs AUTO_INCREMENT = 1";
						$rsm= new ResultSetMapping();
						$query=$this->getEntityManager()->createNativeQuery($sSql, $rsm);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb sql ".$sSql." ".$e->getMessage());
					}
					*/
				
					//die(" resultat sql init".($bQok) ? "sql ok" : "sql pas ok".$sSql);
								
					
					$sSql="delete from oeuvresBundle:Oeuvres";
					$query=$this->getEntityManager()->createQuery($sSql);
					$bQok=$query->execute();
					
					try {
						$sSql="delete from oeuvresBundle:TempsLiturgiques";
						$query=$this->getEntityManager()->createQuery($sSql);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb TempsLiturgiques ".$sSql." ".$e->getMessage());
						
					}							

					try {
						$sSql="delete from oeuvresBundle:Voix";
						$query=$this->getEntityManager()->createQuery($sSql);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb Voix ".$sSql." ".$e->getMessage());
							
					}
					

					try {
						$sSql="delete from oeuvresBundle:Fonctions";
						$query=$this->getEntityManager()->createQuery($sSql);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb Fonctions ".$sSql." ".$e->getMessage());
							
					}
					

					try {
						$sSql="delete from oeuvresBundle:Genres";
						$query=$this->getEntityManager()->createQuery($sSql);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb Genres ".$sSql." ".$e->getMessage());
							
					}
						
					

					try {
						$sSql="delete from oeuvresBundle:Langues";
						$query=$this->getEntityManager()->createQuery($sSql);
						$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb Langues ".$sSql." ".$e->getMessage());
							
					}
					
//$o=new langues_oeuvres();

					

					try {
						$sSql="delete from langues_oeuvres";
					
						$params = array();
					
						$stmt = $eml->getConnection()->prepare($sSql);
						//$stmt = $eml->getConnection()->prepare($sSql);
						$stmt->execute($params);
					
						//$rsm= new ResultSetMapping();
						//$query=$this->getEntityManager()->createNativeQuery($sSql, $rsm);
						//$query=$this->getEntityManager()->createQuery($sSql);
						//$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb delete langues_oeuvres ".$sSql." ".$e->getMessage());
							
					}
					
					try {
						$sSql="delete from oeuvres_langues";
					
						$params = array();
					
						$stmt = $eml->getConnection()->prepare($sSql);
						//$stmt = $eml->getConnection()->prepare($sSql);
						$stmt->execute($params);
					
						//$rsm= new ResultSetMapping();
						//$query=$this->getEntityManager()->createNativeQuery($sSql, $rsm);
						//$query=$this->getEntityManager()->createQuery($sSql);
						//$bQok=$query->execute();
					}catch (\Exception $e)
					{
						die("pb delete oeuvres_langues ".$sSql." ".$e->getMessage());
							
					}					
					
			
					
					
				}
			}
			
			echo "<br/> PARCOURS DES LIGNES LUES <br/><br/>";
			
			/**
			 * par cours des lignes
			 */
			//echo "<br/>";
			$icpt=0;
			foreach ($aLignesImport as $iligne=>$aLigne)
			{
				
				$valf=trim($aLigne->getColA());
				
				//echo "<br/>".$valf.";"."0"."<br/>";
				
				if($valf!='')//TITRE
				{
					$nom=trim($aLigne->getColB());
					$prenom=trim($aLigne->getColBP());
					
					$harmonisateur="";//trim($aLigne->getColHar());
						
					$baTraiter=1;						
					
					if($sDossierDebut!='' && is_numeric($sDossierDebut))
					{
						if($aLigne->getColC()!='' && is_numeric($aLigne->getColC()))
						{
							$sdos=$aLigne->getColC();
			
							$baTraiter=0;
								
							if($sdos>=$sDossierDebut)
							{
								$baTraiter=1;
							}
						}						
					}
										
					if($sDossierFin!="" && $baTraiter==1)
					{
						$baTraiter=0;
						
						if($aLigne->getColC()!='' && is_numeric($aLigne->getColC()))
						{
							$sdos=$aLigne->getColC();
							if($sdos<=$sDossierFin)
							{
								$baTraiter=1;
							}
						}
					}
					
					
					
					if($baTraiter==1)
					{
					
						//echo "<br/>  DOSSIER >".$aLigne->getColC()."< DEBUT >".$sDossierDebut." FIN >".$sDossierFin."<";
						
					//if($nom!='')
					//{
						/*
						 * tester Anonyme et ""
						 */
						$banonyme=false;
						$banonymebd=false;
						$nom=strtoupper($nom);
						
						$nomcompo=$nom;
						
						$an=explode("/", $nom);
						
						if(is_array($an))
						{
							
							//echo "<br/> 1182 <br/>";
							//var_dump($an);
							/*if($baa)
							 {
							 echo "<br/>  778, auteur >".$vcol."< <br/>";
						
							 var_dump($aColCom);
						
							 }*/
						
							//echo "<br/>1116 nb=".count($aColCom)."<br/>";
						
							$nom=$an[0];
							$nomcompo=$nom;
							
							if(count($an)>1)
							{
								$nom=$an[0];				
								//echo "<br/> 1201 \$nom >".$nom."< <br/>";
								
								$harmonisateur=$an[1];
								//echo "<br/> 1201 \$harmonisateur >".$harmonisateur."<";
								
								//$anh=explode(" ", $harmonisateur);								
								//var_dump($anh);
								
								$prenom=$an[1];
								//echo "<br/>*********** 1202 \$prenom >".$prenom."<";
								
								if(count($an)>2){
									$prenom.=" ".$an[2];
									if(count($an)>3){
										$prenom.=" ".$an[3];
									}
								}						
								//echo "<br/> 1209 \$prenom >".$prenom."<";
								
								if(trim(strtoupper($nom))!=="ANONYME")
								{
									$harmonisateur=$nom;
										
								}
								
								
							}						
							//var_dump($imp);						
							//die("618");						
						}
						$nom=strtoupper($nom);
						
						//echo "<br/> 1224 COMPOSITEUR >".$nomcompo."<";
						
						if($nom=="ANONYME")
						{
							//$banonyme=true;
							$banonymebd=true;
							
							
						}else{
							$an=explode(" ", $nom);
							$nom=strtoupper($nom);
							//$harmonisateur=$nom;
											
//echo "<br/>1138 NOM >".$nom."<";							
							if(is_array($an))
							{						
								$nom=$an[0];					
																
								if(count($an)>1)
								{
									$nom=$an[0];
									$prenom=$an[1];
									if(count($an)>2){
										$prenom.=" ".$an[2];
										if(count($an)>3){
											$prenom.=" ".$an[3];
										}
									}
										
								}
							}
						}
						
						$shar=$imp->getColHar();
						
						if($nom=="ANONYME")
						{
							//echo "<br/> 1261 HARMONISATEUR >".$aLigne->getColHar()."< PRENOM >".$aLigne->getColHarp()." TITRE >".$aLigne->getColA();
							
							$banonyme=($aLigne->getColHar()!="");
								
						}
						/*if(trim($nom)=="")
						{
							$banonyme=true;
						}else {
							$banonyme=false;							
						}
						*/
						
						$nom=ucfirst(trim($nom));
						$idcompo=0;
						
						if($banonyme==false && $nom!='')
						{

							
							if(strtoupper(trim($nom))=="ANONYME" && trim($prenom)=="")
							{
								/*
								if($nom=="ANONYME")
								{
									echo "<br/>1286 COMPO ANONYME nom >".$nom;
														
								}*/
								//echo "<br/>1176 prenom >".$prenom;
								
								$idcompo= $eml->getRepository('oeuvresBundle:Compositeurs')->rechercheCompositeur($nom,$prenom);
								if($idcompo==0)
								{
									$idcompo=$eml->getRepository('oeuvresBundle:Compositeurs')->insertionCompositeur($nom,$prenom);
									if($idcompo==0)
									{
										die("Erreur");
									}
										
								}else
								{
									//die("existe");
								}
							
							}else{

								
								if(strtoupper(trim($nom))=="ANONYME")
								{
									$an=explode(" ", $prenom);
									
									//echo "<br/>1312 prenom >".$prenom;
									
									if(is_array($an))
									{
										$nom=$an[0];
										if(count($an)>1)
										{
											$prenom=$an[1];
											//echo "<br/>1210 ANONYME nom >".$nom;
											//echo "<br/>1211 prenom >".$prenom;
											
											if(count($an)>2){
												$prenom.=" ".$an[2];
												if(count($an)>3){
													$prenom.=" ".$an[3];
												}
											}											
										}
									}
								}
								$idcompo= $eml->getRepository('oeuvresBundle:Compositeurs')->rechercheCompositeur($nom,$prenom);
								if($idcompo==0)
								{
									$idcompo=$eml->getRepository('oeuvresBundle:Compositeurs')->insertionCompositeur($nom,$prenom);
									if($idcompo==0)
									{
										die("Erreur");
									}
										
								}else
								{
									//die("existe");
								}
							}						

						}
						
						$idharmo=0;
						if($harmonisateur!='')
						{
							//echo "<br/><br/>1340 harmonisateur >".$harmonisateur."<";							
							$nomcompo=	$aLigne->getColB();	
							$prenomcomp=$aLigne->getColBP();
							$snomh=	$aLigne->getColHar();						
							$spreh=	$aLigne->getColHarp();							
							
							//echo "<br/>1358 \$nomcompo >".$nomcompo;					
							//echo "<br/>1359 \$prenomcomp >".$prenomcomp;					
							//echo "<br/>1360 \$snomh >".$snomh;					
							//echo "<br/>1361 \$spreh >".$spreh;

							$idharmo= $eml->getRepository('oeuvresBundle:Compositeurs')->rechercheCompositeur($snomh,$spreh);
								
							if($idharmo==0)
							{
							
								$idharmo=$eml->getRepository('oeuvresBundle:Compositeurs')->insertionCompositeur($snomh,$spreh);
							
								//echo "<br/>1134 INSERTTION HARMONISATEUR idharmo=".$idharmo." NOM >".$snomh."< PRE >".$spreh."<";
							
								if($idharmo==0)
								{
									die("Erreur INSERTION HARMONISATEUR");
								}
									
								/*if($banonyme)
								{
									die("PAIRE ANONYME HARMONISATEUR ".$idharmo." >".$nomhar."< >".$prenomhar."<");
								}*/
									
							}
							

							$harmonisateur='';
						}
							
						
							
						/*
						 * 
						 * SELECT * FROM `Genres` // Typesmusiques
						 * 
						Modifier Modifier 	Copier Copier 	Effacer Effacer 	1 	1 	Musique sacrée 	2016-04-27 00:00:00
						Modifier Modifier 	Copier Copier 	Effacer Effacer 	2 	1 	Musique liturgique 	2016-04-27 00:00:00
						Modifier Modifier 	Copier Copier 	Effacer Effacer 	3 	1 	Musique profane 	2016-04-27 00:00:00
						 */
						
						$iTypedeMusique=0;//MUSIQUE_SACREE MUSIQUE_PROFANE						
						
						$valf=$this->epure($valf);
						$idoeuvre=$this->rechercheOeuvre($valf);
						if($idoeuvre==0)
						{
							/*
							if(trim($aLigne->getColK()!=""))
							{
								$iTypedeMusique=MUSIQUE_SACREE;
							}
							if(trim($aLigne->getColL()!=""))
							{
								$iTypedeMusique=MUSIQUE_PROFANE;
							}
							*/
							
							$idharmo=(isset($idharmo)) ? $idharmo : 0;
							
							//echo "<br/> 1292 ".$valf."<";
							//echo "<br/> 1293 idcompositeur=".$idcompo." idharmo=".$idharmo;
								
							$idoeuvre=$this->insertionOeuvre($valf,$idcompo,$idharmo,$aLigne->getColC(),$banonyme,STATUT_EN_COURS,$aLigne->getColH(),$aLigne->getColM());
							unset($idharmo);
						}
						
						/*
						 * 
						 */
						$idtpslit=0;
						$idfonc=0;
						$idvoix=0;
											
						if($idoeuvre!=0)
						{
							$sLib=$aLigne->getColF();
							$sLib=trim($sLib);
							
							
							if($sLib!="")
							{
								
								//$idtpslit= rechercheTempsLiturgique($aLigne->getColF());
								$idtpslit= $eml->getRepository('oeuvresBundle:TempsLiturgiques')->rechercheTempsLiturgique($sLib);
								
								
								if($idtpslit==0)
								{
									$idtpslit= $eml->getRepository('oeuvresBundle:TempsLiturgiques')->insertionTempsLiturgique($sLib);
									
									//echo "<br/> rechercheTempsLiturgique .ID CREE ..>".$idtpslit."<";
										
								}
								

							}				
							
							
							/**
							 * 
							 * voix 
							 * */
							
							$sLib=$aLigne->getColI();
							$sLib=trim($sLib);
							
							
							if($sLib!="")
							{
								$sLib=str_ireplace("/"," ", $sLib);
								//$idtpslit= rechercheTempsLiturgique($aLigne->getColF());
								
								$idvoix= $eml->getRepository('oeuvresBundle:Voix')->rechercheVoix($sLib);
								
								//echo "<br/>950....... rechercheVoix ...".$sLib." ( ".$idvoix.")";
								
								if($idvoix==0)
								{
									$idvoix= $eml->getRepository('oeuvresBundle:Voix')->insertionVoix($sLib);
										
								}
							
								//echo "<br/> fin Voix ...".$sLib." ( ".$idvoix.")";
								
							}
							
							/**
							 *
							 * Fonctions tps liturgique
							 * */
								
							$sLib=$aLigne->getColG();
							$sLib=trim($sLib);
							if($sLib!="")
							{
								//$idtpslit= rechercheTempsLiturgique($aLigne->getColF());
							
								$idfonc= $eml->getRepository('oeuvresBundle:Fonctions')->rechercheFonction($sLib);
							
								//echo "<br/>983....... rechercheFonction ...".$sLib." ( ".$idfonc.")";
							
								if($idfonc==0)
								{
									$idfonc= $eml->getRepository('oeuvresBundle:Fonctions')->insertionFonction($sLib);
							
								}
									
								//echo "<br/> fin oeuvresBundle:Fonctions ...".$sLib." ( ".$idfonc.")";
							
							}							
							
							/**
							 * Genres et Types de Musique
							 */
							
							$sLibGenre="";
											
							if(trim($aLigne->getColK()!=""))
							{
								$iTypedeMusique=MUSIQUE_SACREE;
								$sLibGenre=$aLigne->getColK();
							}
							if(trim($aLigne->getColL()!=""))
							{
								$iTypedeMusique=MUSIQUE_PROFANE;
								$sLibGenre=$aLigne->getColL();
							}

							//echo "<br/> getColK >".$aLigne->getColK()."<";
							//echo "<br/> getColL >".$aLigne->getColL()."<";
							//echo "<br/> TYPE DE MUSIQUE >".$iTypedeMusique."<";
								
							switch ($iTypedeMusique)
							{
								case MUSIQUE_SACREE;
									break;
								case MUSIQUE_LITURGIQUE:
									break;
								case MUSIQUE_PROFANE:
									break;
							}
							
							$sLibGenre=trim($sLibGenre);
							$idgenre=0;
							if($sLibGenre!="")
							{
								
								$idgenre= $eml->getRepository('oeuvresBundle:Genres')->rechercheGenre($sLibGenre);
				
								//echo "<br/>983....... rechercheFonction ...".$sLib." ( ".$idfonc.")";
									
								if($idgenre==0)
								{
									$idgenre= $eml->getRepository('oeuvresBundle:Genres')->insertionGenre($sLibGenre,$iTypedeMusique);
										
								}
									
								//echo "<br/> fin oeuvresBundle:Genres ...".$sLibGenre." ( ".$idgenre.")";
								
							}		
							
							/**
							 * Langues
							 * 
							 */
							
							$aColLangues=array();
							$aOeuvreLangues=array();
								
							$sLibLangue=$aLigne->getColD();
							if($sLibLangue!='')
							{
								$aColLangues[]=$sLibLangue;
							}
							$sLibLangue=$aLigne->getColE();
							if($sLibLangue!='')
							{
								$aColLangues[]=$sLibLangue;
							}
							if(count($aColLangues)>0)
							{
								foreach ($aColLangues as $sLibLangue)
								{
									$aLangues=explode("/", $sLibLangue);
									
									//var_dump($aLangues);
										
									if(is_array($aLangues))
									{
										foreach ($aLangues as $sLib)
										{
											$sLib=$this->epure($sLib);
											$sLib=strtolower($sLib);
											
											//echo "<br/> tableau de langues >".$sLib."<";
											if($sLib!='')
											{
												switch ($sLib)
												{
													case 'greg':
													case 'gregorien':
														$sLib='latin';
														break;
													default:
															
												}
												//echo "<br/> tableau de langues apres conversion >".$sLib."<";
												
												$aOeuvreLangues[]=$sLib;
											}							
										}
									}
									else 
									{
										if($sLibLangue!='')
										{
											$sLibLangue=$this->epure($sLibLangue);
											$sLibLangue=strtolower($sLibLangue);
											switch ($sLibLangue)
											{
												case 'greg':
												case 'gregorien':
													$sLibLangue='latin';
													break;
												default:													
														
											}
											$aOeuvreLangues[]=$sLibLangue;
										}
									}
								}
							}							
	
							$scommentaires="";
								
							//var_dump($aOeuvreLangues);
							$aIdlangues=array();
							foreach ($aOeuvreLangues as $sLibLangue)
							{
								
								
								$idlangue= $eml->getRepository('oeuvresBundle:Langues')->rechercheLangue($sLibLangue);
									
								if($idlangue==0)
								{
									$idlangue= $eml->getRepository('oeuvresBundle:Langues')->rechercheLibelleLangue($sLibLangue);
								}
								if($idlangue==0)
								{
									$idlangue= $eml->getRepository('oeuvresBundle:Langues')->insertionLangue($sLibLangue);
									/*
									 * 
									 */
							
								}
								if($idlangue!=0)
								{
									$aIdlangues[]=$idlangue;
								}
								
						

								//echo "<br/> fin oeuvresBundle:Langues ...".$sLibLangue." ( ".$idlangue.")";//delete
							}
							
									
							if($aLigne->getColP()!='')
							{
								$scommentaires.=$aLigne->getColP();
							}
							if($aLigne->getColQ()!='')
							{
								$scommentaires.='\n';
								$scommentaires.=$aLigne->getColQ();
							}
							
							
							/**
							 * maj OEUVRE
							 * */							
							

						
							$eml->getRepository('oeuvresBundle:Oeuvres')->majOeuvre($idoeuvre,$idtpslit,$idvoix,$idfonc,$idgenre,$aIdlangues,$scommentaires);
							
							//echo "<br/> fin maj oeuvre ...".$sLib." ( ".$idtpslit.")";							
														
						}
						$icpt++;
						
						/*
						
						//echo "<br/>Oeuvre ".$valf." (".$idoeuvre." ...".$icpt."/".$cpt."...";
						
						//echo " Compositeur en cours ...".$nom." ".$prenom." ( ".$idcompo.")";
						
						
						 */
						
					}// test $sDossierFin
					
				}

			}
				
			echo "</div>";
		}

		//echo "<br/> nombre de lignes traitées : ".$cpt;
		
		//die("<br/>IMPORT TERMINE ".$sFichier);
		
		$bReInitBase=$cpt >0;
		return $bReInitBase;
	}
	

	/**
	 * 
	 * @param string $sTitre
	 * @return number
	 */
	public function rechercheOeuvre($sTitre)
	{
		$id=0;
		$s=sprintf("%s",$sTitre);
	
		$sql="SELECT
				t.id from oeuvresBundle:Oeuvres t
				WHERE t.titreOeuvre = '".$s."'";
	
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
			
		try {
			$aIds=$query->getResult();
				
			//var_dump($aIds);
				
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$id=$id['id'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$id=0;
		}
	
	
		return $id;
	}
	
	/**
	 *
	 */
	public function insertionOeuvre($sTitre,$idcompo,$idhar,$sRef,$banonyme=false,$avancement_id,$sCote,$siecle)
	{

		$idcree=0;
		
		$sRef=is_null($sRef) ? " " : $sRef;
		
		$conn=$this->getEntityManager()->getConnection();
				
		$nowUtc = new \DateTime( 'now',  new \DateTimeZone( 'UTC' ) );
		
		$s= $nowUtc->format('Y-m-d h:i:s');
		
		$iAnonyme=($idcompo==0) ? 1 : 0;
		$iAnonyme=($banonyme) ? 1 : 0;
		
		$sr=str_repeat(" ", 20);
		
		$sCote=$this->epure($sCote);
		$sCote=$sCote.$sr;
		
		$sCote=substr($sCote, 0,20);
		
		$sTitre=$this->epure($sTitre);
		
		$dataArray=array('titreOeuvre'=>$sTitre
				,'traductiontitreOeuvre'=>$sTitre
				,'actif'=>1
				,'reference'=>$sRef
				,'compositeur_id'=>$idcompo
				,'harmon_id'=>$idhar
				,'anonyme'=>$iAnonyme
				,'datecreateAt'=>$s
				,'avancement_id'=>$avancement_id
				,'tps_litur_id'=>0
				,'cote'=>$sCote
				,'siecle'=>$siecle
		);
		
		//echo "<br/> insertionOeuvre >".$sTitre." COMPO=".$idcompo." IDHAR=".$idhar;
		
		try {
			$bOk=$conn->insert('Oeuvres', $dataArray);
		
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
		
		$idcree=$conn->lastInsertId();
		
		return $idcree;
	
	}
	
	public function majOeuvre($id,$idtpslit,$idvoix,$idfonc,$idgenre,$aIdlangues,$sCommentaires)
	{
	
		$conn=$this->getEntityManager()->getConnection();
		
		$BoK=false;
		
		$dataArray=array(
				'tps_litur_id'=>$idtpslit
		);
		//echo "<br/>....................... majOeuvre ID= ".$id." $idtpslit=".$idtpslit."";
		
		
		
		$nowUtc = new \DateTime( 'now',  new \DateTimeZone( 'UTC' ) );
		
		$s= $nowUtc->format('d/m/Y');
		
		if($sCommentaires!='')
		{
			$sCommentaires='Importée le : '.$s.chr(13).chr(10);
				
		}else{
			$sCommentaires='Importée le : '.$s.chr(13).chr(10);
		}
		
		$qB = $this->getEntityManager()->createQueryBuilder();
		$qB ->update('oeuvresBundle:Oeuvres', 'p')
		->set('p.tps_litur_id', '?1')
		->set('p.voix_id', '?2')
		->set('p.fonction_id', '?3')	
		->set('p.genre_id', '?4')
		->set('p.commentaire', '?5')
		->where('p.id = ?6')
		->setParameter(1, $idtpslit)
		->setParameter(2, $idvoix)
		->setParameter(3, $idfonc)
		->setParameter(4, $idgenre)
		->setParameter(5, $sCommentaires)
		->setParameter(6, $id);
		
		try {

			$BoK= $qB->getQuery()->execute();
					
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
		
		//delete
		
		
		try {
				
			$eml=$this->getEntityManager();
		
			foreach ($aIdlangues as $idl)
			{
				$sSql="INSERT INTO `oeuvres_langues` (`oeuvres_id`, `langues_id`) VALUES ('".$id."', '".$idl."');";
				$params = array();
				$stmt = $eml->getConnection()->prepare($sSql);
				$stmt->execute($params);
		
			}
		
		}catch (\Exception $e)
		{
			//die("<br/>pb insert langues_oeuvres ".$e->getMessage()." idoeuvre=".$id);
		
		}
		
		try {
				
			$eml=$this->getEntityManager();
		
			foreach ($aIdlangues as $idl)
			{
		
				$sSql="INSERT INTO `langues_oeuvres` (`oeuvres_id`, `langues_id`) VALUES ('".$id."', '".$idl."');";
				$params = array();
				$stmt = $eml->getConnection()->prepare($sSql);
				$stmt->execute($params);
		
			}
		
		}catch (\Exception $e)
		{
			//die("<br/>pb insert langues_oeuvres ".$e->getMessage()." idoeuvre=".$id);
		
		}		
		
		return $BoK;
		
	}
	
	private function epure($texte)
	{
		//$texte = trim(strtolower($texte));
		$texte=trim($texte);
		$texte = htmlentities($texte, ENT_NOQUOTES, 'utf-8');
		$texte = preg_replace('#&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $texte);
		$texte = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $texte); // pour les ligatures
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
	
		$texte = strtr(
				$texte,
				'@ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ',
				'aAAAAAACEEEEIIIIOOOOOUUUUYaaaaaaceeeeiiiioooooouuuuyy'
				);
		$texte=str_ireplace(chr(34), " ", $texte);
		$texte=str_ireplace(chr(39), "", $texte);
		
		/*
044      054    2C   00101100        ,    (comma)		 * 
		 */
		$texte=str_ireplace(chr(54), " ", $texte);
		
		//$texte=strtr($texte, chr(54)," ");		
		return $texte;
	}
	
	
}

class import
{
	private $colA;//TITRE OEUVRE
	private $colB;//compositeur
	private $colBP;//compositeur prénom
	private $colHAR;//compositeur harmonisateur
	private $colHARP;//compositeur harmonisateur prenom
	private $colC;//reference NUMERO DE DOSSIER
	private $colD;//LANGUE GREGORIEN latin		Langues
	private $colE;//Langues
	private $colF;//TempsLiturgiques
	private $colG;//Fonctions
	private $colH;//cote
	private $colI;//voix
	private $colJ;//???
	private $colK;//11 COLONNE K >> GENRE MUSIQUE SACREE 			si valeur dans cette colonne type musique = SACREE Typesmusiques
	private $colL;//12 COLONNE L >> GENRE MUSIQUE PROFANE			si valeur dans cette colonne type musique = PROFANE Typesmusiques
	private $colM;//13 SIECLE
	private $colN;//14 reference
	private $colO;//15 Accompagnements
	private $colP;//16 commentaires
	private $colQ;//17 commentaires
	
	/*
11 COLONNE K >> MUSIQUE SACREE 			si valeur dans cette colonne type musique = SACREE

12 COLONNE L >> MUSIQUE PROFANE			si valeur dans cette colonne type musique = PROFANE	 * 

	 */
	private $idtypemusique;//
		
	public function getColA()
	{
		return $this->colA;
	}
	public function setColA($sVal)
	{
		$this->colA=$sVal;
		return $this;
	}
	public function getColB()
	{
		return $this->colB;
	
	}
	public function setColB($sVal)
	{
		$this->colB=$sVal;
		return $this;
	
	}
	public function getColBP()
	{
		return $this->colBP;
	
	}
	public function setColBP($sVal)
	{
		$this->colBP=$sVal;
		return $this;
	
	}
	
	public function setColHar($sVal)
	{
		$this->colHAR=$sVal;
		return $this;
	
	}
	public function getColHar()
	{
		return $this->colHAR;
	
	}
	
	public function setColHarp($sVal)
	{
		$this->colHARP=$sVal;
		return $this;
	
	}
	public function getColHarp()
	{
		return $this->colHARP;
	
	}
		

	public function getColC()
	{
		return $this->colC;
		
	}
	public function setColC($sVal)
	{
		$this->colC=$sVal;
		return $this;
		
	}
	public function getColD()
	{
		return $this->colD;
		
	}
	public function setColD($sVal)
	{
		$this->colD=$sVal;
		return $this;
		
	}
	public function getColE()
	{
		return $this->colE;
		
	}
	public function setColE($sVal)
	{
		$this->colE=$sVal;
		return $this;
		
	}
	public function getColF()
	{
		return $this->colF;
	}
	public function setColF($sVal)
	{
		$this->colF=$sVal;
		return $this;
		
	}
	public function getColG()
	{
		return $this->colG;
		
	}
	public function setColG($sVal)
	{
		$this->colG=$sVal;
		return $this;
		
	}
	public function getColH()
	{
		return $this->colH;
		
	}
	public function setColH($sVal)
	{
		$this->colH=$sVal;
		return $this;
		
	}
	public function getColI()
	{
		return $this->colI;
		
	}
	public function setColI($sVal)
	{
		$this->colI=$sVal;
		return $this;
		
	}
	public function getColJ()
	{
		return $this->colJ;
		
	}
	public function setColJ($sVal)
	{
		$this->colJ=$sVal;
		return $this;
		
	}
	public function getColK()
	{
		return $this->colK;
	
	}
	public function setColK($sVal)
	{
		$this->colK=$sVal;
		return $this;
	
	}
	public function getColL()
	{
		return $this->colL;
	
	}
	public function setColL($sVal)
	{
		$this->colL=$sVal;
		return $this;
	
	}	
	public function getColM()
	{
		return $this->colM;
		
	}
	public function setColM($sVal)
	{
		$this->colM=$sVal;
		return $this;
		
	}
	public function getColN()
	{
		return $this->colN;
		
	}
	public function setColN($sVal)
	{
		$this->colN=$sVal;
		return $this;
		
	}
	public function getColO()
	{
		return $this->colO;
		
	}
	public function setColO($sVal)
	{
		$this->colO=$sVal;
		return $this;
		
	}
	public function getColP()
	{
		return $this->colP;
		
	}
	public function setColP($sVal)
	{
		$this->colP=$sVal;
		return $this;
		
	}
	public function getColQ()
	{
		return $this->colQ;
	
	}
	public function setColQ($sVal)
	{
		$this->colQ=$sVal;
		return $this;
	
	}	

	
}