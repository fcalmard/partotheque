<?php

namespace oeuvresBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * FonctionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FonctionsRepository extends EntityRepository
{
	public function ChargeListe($aFiltres=Null)
	{
		$aFonctions=array();
		$aListe=array();
		
		$btous=true;
		$sfonction='';
		if(isset($aFiltres) & is_array($aFiltres) & count($aFiltres)!=0)
		{
			$sfonction=(isset($aFiltres['fonction'])) ? $aFiltres['fonction'] : '';
			$btous=(isset($aFiltres['tous'])) ? $aFiltres['tous'] : 0 ;
		}
		
		$sSql='SELECT
						t.id,
						t.active,
						t.id_tpslitur,
						t.code,
						t.libelle,
						t.datecreateAt
						FROM oeuvresBundle:Fonctions t where ';
		
		if($btous=='2')
		{
			$sSql.='t.active=0';
			
		}
		else{
			$sSql.='t.active=1';
			$btous=($btous=='1');
			if(!$btous && $sfonction!='')
			{
				$s=sprintf("%s",$sfonction);
				$sSql.=" and (t.libelle like '%$s%'";
				$sSql.=" or t.libelle = '$sfonction')";
			}
		}
		
		$sSql.=' order by t.libelle';
		
		$query = $this->getEntityManager()
		->createQuery($sSql);
		
		$em=$this->getEntityManager();
		
		try {
			
			$aFonctions= $query->getArrayResult();
			foreach ($aFonctions as $oFonc)
			{
				$idtps=(integer)$oFonc['id_tpslitur'];
				
				$slib=($idtps==0) ? '?' : 'ok';//Temps liturgique inconnu ?
				
				$bactive=$oFonc['id'];
				
				if($idtps!=0)
				{
					//$id_tpslitur=$entity->getIdTpslitur();
					$entity = $em->getRepository('oeuvresBundle:TempsLiturgiques')->find($idtps);
					if($entity)
					{
						$slib=$entity->getLibelle();
						$slib=$this->epure($slib);
						
						$bactive=$entity->getActive();
						
					}
				}
				//
				$oFonction=array('id'=>$oFonc['id']
						,'active'=>$oFonc['active']
						,'id_tpslitur'=>$oFonc['id_tpslitur']
						,'code'=>$oFonc['code']
						,'libelle'=>$oFonc['libelle']
						,'datecreateAt'=>$oFonc['datecreateAt']
						,'lib_tpslitur'=>$slib
				);

				$aListe[]=$oFonction;
				
			}
			
		} catch (\Doctrine\ORM\NoResultException $e) {
			$aFonctions=null;
			$aListe=null;
		}

		$Ordreaff=array();
		
		foreach ($aListe as $key=>$row)
		{
			$slib=$row['lib_tpslitur'];
			$Ordreaff[$key]  = $slib;
			//echo "<br/>96 $slib<";
			
		}
		array_multisort($Ordreaff,SORT_ASC,$aListe);
		
		$skeylib='';
		
		$aFonctions=array();
		
		foreach ($aListe as $key=>$oFonc)
		{
			$oFonction=array('id'=>$oFonc['id']
					,'active'=>$oFonc['active']
					,'id_tpslitur'=>$oFonc['id_tpslitur']
					,'code'=>$oFonc['code']
					,'libelle'=>$oFonc['libelle']
					,'datecreateAt'=>$oFonc['datecreateAt']
					,'lib_tpslitur'=>'');//$oFonc['lib_tpslitur']
			
			if($skeylib=='')
			{
				$oTpsliturgique=array('id'=>$oFonc['id_tpslitur']
						,'active'=>$oFonc['active']
						,'id_tpslitur'=>0
						,'code'=>''
						,'libelle'=>''
						,'datecreateAt'=>$oFonc['datecreateAt']
						,'lib_tpslitur'=>$oFonc['lib_tpslitur']);
				$aFonctions[]=$oTpsliturgique;
				
				$skeylib=$oFonc['lib_tpslitur'];
				
			}else{
				/*
				 * rupture
				 */
				if($oFonc['lib_tpslitur']!=$skeylib)
				{
					$oTpsliturgique=array('id'=>$oFonc['id_tpslitur']
							,'active'=>$oFonc['active']
							,'id_tpslitur'=>0
							,'code'=>''
							,'libelle'=>''
							,'datecreateAt'=>$oFonc['datecreateAt']
							,'lib_tpslitur'=>$oFonc['lib_tpslitur']);
					$aFonctions[]=$oTpsliturgique;
					
					$skeylib=$oFonc['lib_tpslitur'];
					
					//echo "<br/>150 RUPTURE >$skeylib<";
					
				}
			}

			$aFonctions[]=$oFonction;
		
		}
		
		return $aFonctions;
		
	}
	
	public function ChargeListeIds()
	{
	
	
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT	t.id FROM oeuvresBundle:Fonctions t'
				);
		
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
	
	
	}	
	
	/**
	 *
	 * @param string $sCode
	 * @return number
	 */
	public function rechercheFonction($sCode)
	{
		$id=0;
			
		$sCode=$this->epure($sCode);
		
		$sCode=strtoupper($sCode);
		
		$sCode=substr($sCode, 0,10);
		
		$sCode=sprintf("%s",$sCode);
	
		$sql="SELECT
				t.id from oeuvresBundle:Fonctions t
				WHERE t.code = '".$sCode."'";
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
			
		try {
			$aIds=$query->getResult();
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$id=$id['id'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$id=0;
		}
	
	
		return $id;
	}
	/**
	 *
	 * @param int $id
	 * @return string
	 */
	public function rechercheLibelle(int $id)
	{
		$slib='';
		
		$sql="SELECT
				t.id,t.libelle from oeuvresBundle:Fonctions t
				WHERE t.id = ".$id;
		
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
		
		try {
			$aIds=$query->getResult();
			
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$o)
				{
					$slib=$o['libelle'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$slib='';
		}
		
		//die('resultat recherche oeuvresBundle:Fonctions '.$slib);
		
		return  $slib;
	}
	/**
	 *
	 */
	public function insertionFonction($sLib,$idtpslit)
	{
	
		$idcree=0;
	
		$sCode=$sLib;
				
		$sCode=$this->epure($sCode);

		$sCode=strtoupper($sCode);
		
		$sCode=substr($sCode, 0,10);
		
		$nowUtc = new \DateTime( 'now',  new \DateTimeZone( 'UTC' ) );
		
		$sdate= $nowUtc->format('Y-m-d h:i:s');
		
		$conn=$this->getEntityManager()->getConnection();
	
		$dataArray=array('code'=>$sCode,'libelle'=>$sLib,'active'=>1,'id_tpslitur'=>$idtpslit
				,'datecreateAt'=>$sdate
				
		);
	
		try {
			$bOk=$conn->insert('Fonctions', $dataArray);
	
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
	
		$idcree=$conn->lastInsertId();
	
		return $idcree;
	
	}
	
	private function epure($texte)
	{
		$texte = trim(strtolower($texte));
		$texte = htmlentities($texte, ENT_NOQUOTES, 'utf-8');
		$texte = preg_replace('#&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $texte);
		$texte = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $texte); // pour les ligatures
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
		$texte = preg_replace('#&[^;]+;#', '', $texte); // supprime les autres caractères
		
		$texte = strtr(
				$texte,
				'@ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ',
				'aAAAAAACEEEEIIIIOOOOOUUUUYaaaaaaceeeeiiiioooooouuuuyy'
				);
		
		
		return $texte;
	}
	
}
