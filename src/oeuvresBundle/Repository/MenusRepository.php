<?php

namespace oeuvresBundle\Repository;

use Symfony\Component\HttpKernel\Profiler\Profile;

use Doctrine\ORM\EntityRepository;

/**
 * MenusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenusRepository extends EntityRepository
{
	
	public function ChargeListe()
	{		
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT DISTINCT 
				t.id,
				t.codeMenu as mcode,
				t.libelleMenu,
				t.id_mensup,
				t.lnk,
				t.actif,
				t.ordreaff,
				t.datecreateAt

				
				 FROM oeuvresBundle:Menus t
				
				WHERE t.actif=1 AND (t.id_mensup=0 or t.id_mensup IS NULL) order by t.ordreaff'
		);
 
		$aArbre=array();
		
		
		try {
			
			$a=$query->getArrayResult();		
			
			foreach ($a as $oM)
			{		
				
				$aSousMenu=array("id"=>$oM['id'],"mcode"=>$oM['mcode']
						,"libelleMenu"=>$oM['libelleMenu']
						,"id_mensup"=>$oM['id_mensup']
						,"ordreaff"=>$oM['ordreaff']
						,"lnk"=>$oM['lnk']
						,"actif"=>$oM['actif']						
						,"datecreateAt"=>$oM['datecreateAt']
						,"smid"=>" ","smcode"=>" ","smlib"=>" ");
				
				$aArbre[]=$aSousMenu;
				
				foreach ($oM as $k=>$oM2)
				{
										
					$aListeSousMenus=array();
						
					switch ($k)
					{
						case 'id':
							//recherche des sous menus
							
							$querySmenu = $this->getEntityManager()
							->createQuery(
									'SELECT DISTINCT
										sm.id,
										sm.codeMenu,
										sm.libelleMenu,
										sm.id_mensup,
										sm.lnk,
										sm.actif,
										sm.ordreaff,
										sm.datecreateAt									
									
									FROM oeuvresBundle:Menus sm
									WHERE sm.id_mensup='.$oM2
									.' AND sm.actif=1 order by sm.ordreaff,sm.libelleMenu'
							);
								
							
							try {
								$aListeSousMenus=$querySmenu->getArrayResult();

								foreach ($aListeSousMenus as $osM)
								{
									
									$aSousMenu=array("id"=>$osM['id'],"mcode"=>$osM['codeMenu']
											,"libelleMenu"=>" "
											,"id_mensup"=>$osM['id_mensup']
											,"ordreaff"=>$osM['ordreaff']
											,"lnk"=>$osM['lnk']
											,"actif"=>$osM['actif']
											,"datecreateAt"=>$osM['datecreateAt']
											,"smid"=>" ","smcode"=>" ","smlib"=>$osM['libelleMenu']);				
											
									$aArbre[]=$aSousMenu;
															
								}
															
								
							} catch (\Doctrine\ORM\NoResultException $e) {
								die("ERREUR LISTE SOUS MENUS");
							}
											
							
							//echo "<br/> nombre de sous menus ".count($aListeSousMenus);
							break;
						case 'id_mensup':
							break;
						default:
							break;
					}
						
				}
				
			}
			
			/*
			 * liste des profils menu  du profil admin (1)
			 */
			$this->ListeProfilsMenus(1);
			
			return $aArbre;			
			
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}

		
		
	}
	
	public function ListeProfilsMenus($idProfil)
	{
		
		$aListeMenusARemplir=array();
		
		$aListeMenus=array();
		
		/*
		 * liste des MENUS
		 */
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT DISTINCT
				t.id,
				t.codeMenu as mcode,
				t.libelleMenu,
				t.id_mensup,
				t.lnk,
				t.actif,
				t.ordreaff,
				t.datecreateAt
		
				FROM oeuvresBundle:Menus t
		
				WHERE t.actif=1 
				order by t.libelleMenu'
		);
		
				
		try {
			$aListeMenus=$query->getArrayResult();
			/*
			foreach ($aListeMenus as $oMenu)
			{
				$queryPrm = $this->getEntityManager()
				->createQuery(
						'SELECT t.menus_id,
						t.profils_id
						FROM oeuvresBundle:profils_menus t
						WHERE t.profils_id='.$idProfil.' AND t.menus_id='.$oMenu['id']
				);
				
				$aListeProfilsMenus=$queryPrm->getArrayResult();
				
				var_dump($aListeProfilsMenus);
				
				$bActive=(count($aListeProfilsMenus)>0) ? 1 : 0;
								
			}

			*/
			
				/*
			foreach ($aListeMenus as $oMenu)
			{
				
				 * recherche si il y a un profil menu
				 
				$queryPrm = $this->getEntityManager()
				->createQuery(
						'SELECT DISTINCT
						t.menus_id,
						t.profils_id
						FROM oeuvresBundle:profils_menus t
						WHERE t.profils_id='.$idProfil.' AND t.menus_id='.$oMenu['id']
				);
				$aListeProfilsMenus=$queryPrm->getArrayResult();
				
				$bActive=(count($aListeProfilsMenus)>0) ? 1 : 0;
				
				$aMenu=array("menus_id"=>$oMenu['id'],"profils_id"=>$idProfil,"active"=>$bActive);
				
				$aListeMenusARemplir[]=$aMenu;
			}
			
			 * pour chaque menu rechercher si il y a un profil menu
			 * si oui active=1 si non active=0
			 */

					
			
			
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("ERREUR LISTE MENUS");
		}		
				/*
				 * 
					CREATE TABLE IF NOT EXISTS `profils_menus` (
					  `menus_id` int(11) NOT NULL,
					  `profils_id` int(11) NOT NULL,
					  PRIMARY KEY (`menus_id`,`profils_id`),
					  KEY `IDX_81AF3EE914041B84` (`menus_id`),
					  KEY `IDX_81AF3EE9B9881AFB` (`profils_id`)
					) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci		 * 
				 
				
				$queryPrm = $this->getEntityManager()
				->createQuery(
						'SELECT DISTINCT
						t.menus_id,
						t.profils_id
						FROM oeuvresBundle:profils_menus t
						WHERE t.profils_id='.$idProfil
				);
				
				$aListeProfilsMenus=array();
				
				
				 * recherche les MENUS activÃ© pour le PROFIL
				
				
				try {
					$aListeProfilsMenus=$queryPrm->getArrayResult();
						
		
				
				} catch (\Doctrine\ORM\NoResultException $e) {
					die("ERREUR LISTE PROFILS MENUS");
				}		
				*/
		
		//var_dump($aListeMenusARemplir);
		
		
		
		return $aListeMenusARemplir;

	}
}
