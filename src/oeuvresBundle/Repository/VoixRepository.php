<?php

namespace oeuvresBundle\Repository;

use Doctrine\DBAL\Driver\PDOConnection;

use Doctrine\DBAL\Driver\PDOSqlite\Driver;

use Doctrine\ORM\EntityRepository;

//use \Doctrine\DBAL\Driver\Mysqli\MysqliConnection;

use Doctrine\ORM\Persisters\BasicEntityPersister;

/**
 * VoixRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoixRepository extends EntityRepository
{

	public function ChargeListe()
	{
		
		$aArbre=array();
		
		
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT
				t.id,
				t.active,
				t.libelle,
				t.datecreateAt
				FROM oeuvresBundle:Voix t
				order by t.libelle'
		);
		/*
		$query = $this->getEntityManager()
		->createQuery(
				'SELECT
				t.id,
				t.active,
				t.libelle,
				v.id as idsouscat,
				v.voix_id,
				v.active as sscatactive,
				v.libelle as libsouscateg,
				v.datecreateAt as datcsouscateg,
				t.datecreateAt
				FROM oeuvresBundle:Voix t
				 LEFT JOIN oeuvresBundle:Souscategvoix v WHERE v.voix_id=t.id
				  order by t.libelle,v.libelle'
		);		
		*/
		try {
				
			$a=$query->getArrayResult();
				
			foreach ($a as $oM)			
			{
				
				$aVoix=array("id"=>$oM['id'],"active"=>$oM['active']
						,"libelle"=>$oM['libelle']
						,"datecreateAt"=>$oM['datecreateAt']
						,"active"=>$oM['active']
						,"idsouscat"=>0
						,"voix_id"=>0
						,"sscatactive"=>""
						,"libsouscateg"=>""
						,"datcsouscateg"=>""
				);
				
				$aArbre[]=$aVoix;
				
				$querysscat = $this->getEntityManager()
				->createQuery(
						'SELECT
						v.id as idsouscat,
						v.voix_id,
						v.active as sscatactive,
						v.libelle as libsouscateg,
						v.datecreateAt as datcsouscateg
						 FROM oeuvresBundle:Souscategvoix v
						WHERE v.voix_id='.$oM['id'].
						'order by v.libelle'
				);
				
				$ascv=$querysscat->getArrayResult();
				
				foreach ($ascv as $ascat)
				{
					$aScVoix=array("id"=>0,"active"=>''
							,"libelle"=>''
							,"datecreateAt"=>''
							,"active"=>''
							,"idsouscat"=>$ascat['idsouscat']
							,"voix_id"=>$ascat['voix_id']
							,"sscatactive"=>$ascat['sscatactive']
							,"libsouscateg"=>$ascat['libsouscateg']
							,"datcsouscateg"=>$ascat['datcsouscateg']
					);
					
					$aArbre[]=$aScVoix;
						
					
				}
				
								
			}			
			
		} catch (\Doctrine\ORM\NoResultException $e) {
		}
		
		return $aArbre;
		
				
	}
	

	public function rechercheVoix($sLibelle)
	{
		$id=0;
		
		$sLibelle=trim($sLibelle);
		$sLibelle=strtoupper($sLibelle);
		
		$sLibelle=sprintf("%s",$sLibelle);
	
		$sql="SELECT
				t.id from oeuvresBundle:Voix t
				WHERE t.libelle = '".$sLibelle."'";
	
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
			
		try {
			$aIds=$query->getResult();
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$id)
				{
					$id=$id['id'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$id=0;
		}
	
	
		return $id;
	}
	
	
	/**
	 *
	 */
	public function insertionVoix($sLibelle)
	{
	
		$idcree=0;
	
		$sLibelle=trim($sLibelle);
		$sLibelle=strtoupper($sLibelle);
	
		$conn=$this->getEntityManager()->getConnection();
	
		$nowUtc = new \DateTime( 'now',  new \DateTimeZone( 'UTC' ) );
	
		$s= $nowUtc->format('Y-m-d h:i:s');
	
		$dataArray=array('libelle'=>$sLibelle
				,'active'=>1
				,'datecreateAt'=>$s
		);
	
		try {
			$bOk=$conn->insert('Voix', $dataArray);
	
		} catch (\Doctrine\ORM\NoResultException $e) {
			die("Erreur ".$e->getMessage());
		}
	
		$idcree=$conn->lastInsertId();
	
		return $idcree;
	
	}
	
	/**
	 *
	 * @param int $id
	 * @return string
	 */
	public function rechercheLibelle(int $id)
	{
		$slib='';
		
		$sql="SELECT
							t.id,t.libelle from oeuvresBundle:Voix t
							WHERE t.id = ".$id;
		
		
		$query = $this->getEntityManager()
		->createQuery(
				$sql
				);
		
		try {
			$aIds=$query->getResult();
			
			if(is_array($aIds) && count($aIds)>0)
			{
				foreach ($aIds as $kid=>$o)
				{
					$slib=$o['libelle'];
				}
			}
		} catch (\Doctrine\ORM\NoResultException $e) {
			$slib='';
		}
		
		//echo('resultat recherche oeuvresBundle:Voix '.$slib);
		
		return  $slib;
	}
	
	
}
